let $global = ref { }

let @Object_prototype = ref { }

let @Function_prototype = ref { }

let @isRefComb = fun(f,e) .
  if typeof e === "location" then
    f(!e)
  else
    false



// Algorithm 9.9 of ECMA-262, 3rd ed.
let @toObject = fun(x) .
  if typeof x === "undefined" then
    throw ($makeException("TypeError", "toObject received undefined"))
  else if x === null then
    throw ($makeException("TypError", "toObject received null"))
  else if typeof x === "boolean" then
    ref { 
      "$proto": "$Boolean.prototype",
      "$class": "Boolean",
      "$value": x
    }
  else if typeof x === "number" then
    ref {
      "$proto": "$Number.prototype",
      "$class": "Number",
      "$value": x
    }
  else if typeof x === "string" then
    ref {
      "$proto": "$String.prototype",
      "$class": "String",
      "$value": x
    }
  else
    x

let $makeException = fun(name, msg) .
  @newDirect((!$global)[name], ref ref  { "0": msg, "length": 1.0, "$isArgs": True })

let @newDirect = fun($constr, @argObj) .
  if typeof $constr === "location" && typeof (!$constr) === "object" &&
     typeof ((!$constr)["$code"]) === "lambda"  then
    // [[Construct]], 13.2.2 . it's always the same,
    // so no need to have it be a $constr field (like $call)
    let $protoField = !$constr["prototype"] in
    let $protoObj = if typeof $protoField === "location" && 
                       typeof (!$protoField) === "object" then
                      $protoField
                    else
                      @Object_prototype in
    let $newObj = ref { "$constructing": true,
                        "$class": "Object",
                        "$proto": $protoField } in
    let newResult = !$constr["$code"]($newObj, @argObj) in
      if typeof newResult === "location" && typeof(!newResult) === "object" then
        newResult
      else
        ($newObj := (delete (!$newObj)["$constructing"]);
         $newObj)
  else
    throw ($makeException("TypeError", "new not given a function"))
// |According to the specification, toPrimitive may signal a TypeError.
// this is generalized to do either toString first, or valueOf first,
// based on the 'hint'
// Even though GetValue'd values are given to ToPrimitive in ECMA,
// here we need ERefs because we will apply functions.
// So make sure you give this ERef (EObject) if you get an object.
let @toPrimitive = fun(first,second,$x) .
  //if it's an object ref, then convert it with methods
  //otherwise it is already primitive, so just return it.
  if typeof $x === "location" then
    // [[DefaultValue]] (8.6.2.6)
    let str = fun() .
      let $toStr = (!$x)[second] in
      if typeof $toStr === "location" &&
         typeof (!$toStr) === "object" &&
         typeof ((!$toStr)["$code"]) === "lambda" then
        let $tRes = (!$toStr)["$code"]($x,{ "length": 0.0, "$isArgs": true }) in
          if op(prim?, $tRes) then
            $tRes
          else
            throw($makeException("TypeError", "cannot convert to primitive"))
      else
        throw($makeException("TypeError", "cannot convert to primitive")) in
    let $vOf = (!$x)[first] in
    if typeof $vOf === "location" &&
       typeof (!$vOf) === "object" &&
       typeof ((!$vOf)["$code"]) === "lambda" then
      let $tRes = (!$vOf)["$code"]($x, { "length": 0.0, "$isArgs": true }) in
        if op(prim?, $tRes) then
          $tRes
        else
          str()
    else
      str()
  else
    $x

let @toPrimitive_String = fun(x) . @toPrimitive("toString", "valueOf", x)

let @toPrimitive_Number = fun(x) . @toPrimitive("valueOf", "toString", x)
  
// Algorithm 9.3
// once again, must get object refs to pass them in as 'this' in toPrimitive
let @toNumber = fun($toNum) .
  if (typeof $toNum === "location") then
    op(prim->number, @toPrimitive_Number($toNum))
  else
    op(prim->number, $toNum)
